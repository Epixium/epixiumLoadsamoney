[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://dcu60yqoj8tyx"]

[sub_resource type="Shader" id="Shader_mkj3y"]
code = "shader_type canvas_item;

uniform vec3 outline_color;
uniform vec3 fill_color;
const vec3 base_outline = vec3(1, 0, 0);
const vec3 base_fill = vec3(1, 1, 1);
varying vec4 modulate;

void vertex() {
    modulate = COLOR;
}

void fragment() {
	if (COLOR.rgb == base_outline.rgb) {
		COLOR.rgb = outline_color.rgb;
	}
	if (COLOR.rgb == base_fill.rgb) {
		COLOR.rgb = fill_color.rgb;
	}
	COLOR.a = texture(TEXTURE,UV).a;
    COLOR.a *= modulate.a;
}

//void light() {
	// Called for every pixel for every light affecting the CanvasItem.
	// Uncomment to replace the default light processing function with this one.
//}
"

[resource]
shader = SubResource("Shader_mkj3y")
shader_parameter/outline_color = Vector3(1, 0, 0)
shader_parameter/fill_color = Vector3(1, 1, 1)
